<?php

// Menu & Thumnail Support
if ( function_exists( 'add_theme_support' ) ) {
	add_theme_support( 'menus' );
	add_theme_support( 'post-thumbnails' );
}

// Remove Image Width & Height Attributes	
function remove_width_attribute( $html ) {
    $html = preg_replace( '/(width|height)=\"\d*\"\s/', "", $html );
    return $html;
}
add_filter( 'post_thumbnail_html', 'remove_width_attribute', 10 );
add_filter( 'image_send_to_editor', 'remove_width_attribute', 10 );

// Custom Image Size "Small"
//add_image_size('small', 257, 143);

// Add Menus
if ( function_exists( 'register_nav_menus' ) ) {
	register_nav_menus(
		array(
			'header' => 'Header',
			'footer_left' => 'Footer Left',
			'footer_right' => 'Footer Right',
		)
	);
}

// Get Name of Menu
function get_menu_name( $location ) {
    if( empty($location) ) return false;

    $locations = get_nav_menu_locations();
    if( ! isset( $locations[$location] ) ) return false;

    $menu_obj = get_term( $locations[$location], 'nav_menu' );

    return $menu_obj;
}

// Remove WYSIWYG Editor
function remove_wysiwyg() {
    global $post_type;
    if ('sermon' == $post_type || 'ministry' == $post_type)
        return false;
    return;
}
//add_filter( 'user_can_richedit', 'remove_wysiwyg');

// Remove <p> Tags From The Content
//remove_filter('the_content', 'wpautop');

// Remove Version Number From Head
remove_action('wp_head', 'wp_generator'); 
function blank_version() {
return '';
} 
add_filter('the_generator','blank_version');

// Limit Title Length With Ellipsies ( the_title_limit( 30, '...'); )
function the_title_limit($length, $replacer = '...') {
	$string = the_title('','',false);
	if(strlen($string) > $length)
	$string = (preg_match('/^(.*)\W.*$/', substr($string, 0, $length+1), $matches) ? $matches[1] : substr($string, 0, $length)) . $replacer;
	echo $string;
}

function get_string_limit($string, $length, $replacer = '...'){
	if(strlen($string) > $length)
	$string = (preg_match('/^(.*)\W.*$/', substr($string, 0, $length+1), $matches) ? $matches[1] : substr($string, 0, $length)) . $replacer;
	return $string;	
}

//Deletes all CSS classes and id's, except for those listed in the array below
function custom_wp_nav_menu($var) {
    return is_array($var) ? array_intersect($var, array(
	    //List of allowed menu classes
	    'current_page_item',
	    'current_page_parent',
	    'current_page_ancestor',
	    )
    ) : '';
}
//add_filter('nav_menu_css_class', 'custom_wp_nav_menu');
add_filter('nav_menu_item_id', 'custom_wp_nav_menu');
add_filter('page_css_class', 'custom_wp_nav_menu');
 
//Replaces "current-menu-item" with "active"
add_filter ('wp_nav_menu','current_to_active');
function current_to_active($text){
    $replace = array(
        //List of menu item classes that should be changed to "active"
        'current_page_item' => 'active',
        'current_page_parent' => 'active',
        'current_page_ancestor' => 'active',
    );
    $text = str_replace(array_keys($replace), $replace, $text);
    	return $text;
}
 
//Deletes empty classes and removes the sub menu class
add_filter ('wp_nav_menu','strip_empty_classes');
function strip_empty_classes($menu) {
    $menu = preg_replace('/ class=""| class="sub-menu"/','',$menu);
    return $menu;
}

// Changes The Default Body Classes Generated By Wordpress
function my_body_class( $wp_classes, $extra_classes ) {
    // List of the only WP generated classes allowed
    $whitelist = array('portfolio', 'home', 'error404');
    // Filter the body classes
    $wp_classes = array_intersect($wp_classes, $whitelist);
    // Add the extra classes back untouched
    return array_merge($wp_classes, (array) $extra_classes);
}
add_filter('body_class', 'my_body_class', 10, 2);

//Page Slug Body Class
function add_slug_body_class( $classes ) {
	global $post;
	if ( isset( $post ) && !( is_home() ) ) {
		$classes[] = $post->post_name;
	}
	return $classes;
}
add_filter( 'body_class', 'add_slug_body_class' );


// Support Custom Post Type Shortlinks
function cpt_shortlinks( $shortlink, $id, $context, $allow_slugs=true ) {
	// If query is the context, we probably shouldn't do anything	 */
	if( 'query' == $context )
		return $shortlink;
	$post = get_post( $id );
	$post_id = $post->ID;
	// If this is a standard post, return the shortlink that was already built
	if( 'post' == $post->post_type )
		return $shortlink;
	// Retrieve the array of publicly_queryable, non-built-in post types
	$post_types = get_post_types( array( '_builtin' => false, 'publicly_queryable' => true ) );
	if( in_array( $post->post_type, $post_types ) || 'page' == $post->post_type )
		$shortlink = home_url('?p=' . $post->ID);
	return $shortlink;
}
//add_filter( 'get_shortlink', 'cpt_shortlinks', 10, 4 );

// Remove Links Menu From Admin
class OE_Simple_Admin {
    function __construct() {
        // Hook onto the action 'admin_menu' for our function to remove menu items
        add_action( 'admin_menu', array( $this, 'hide_menus' ) );
    }
 
    function hide_menus() {
        // Links page
        remove_menu_page( 'link-manager.php' );
    }
}
$wptuts_simple_admin = new OE_Simple_Admin();

// Add PDF Support In Media Uploader
function modify_post_mime_types( $post_mime_types ) {
	$post_mime_types['application/pdf'] = array( __( 'PDFs' ), __( 'Manage PDFs' ), _n_noop( 'PDF <span class="count">(%s)</span>', 'PDFs <span class="count">(%s)</span>' ) );
	return $post_mime_types;
}
add_filter( 'post_mime_types', 'modify_post_mime_types' );

// Add Pagination Support
function pagination($pages = '', $range = 2) {  
     $showitems = ($range * 2)+1;  

     global $paged;
     
     if(empty($paged)) $paged = 1;

     if($pages == '') {
         global $wp_query;
         $pages = $wp_query->max_num_pages;
         if(!$pages) {
             $pages = 1;
         }
     }   

     if($pages != 1) {
         echo "<div class='pagination group'>";
         if($paged > 2 && $paged > $range+1 && $showitems < $pages) echo "<a href='".get_pagenum_link(1)."'>&laquo;</a>";
         if($paged > 1 && $showitems < $pages) echo "<a href='".get_pagenum_link($paged - 1)."'>&lsaquo;</a>";

         for ($i=1; $i <= $pages; $i++) {
             if (1 != $pages &&( !($i >= $paged+$range+1 || $i <= $paged-$range-1) || $pages <= $showitems )) {
                 echo ($paged == $i)? "<span class='current-page'>".$i."</span>":"<a href='".get_pagenum_link($i)."' class='inactive' >".$i."</a>";
             }
         }

         if ($paged < $pages && $showitems < $pages) echo "<a href='".get_pagenum_link($paged + 1)."'>&rsaquo;</a>";  
         if ($paged < $pages-1 &&  $paged+$range-1 < $pages && $showitems < $pages) echo "<a href='".get_pagenum_link($pages)."'>&raquo;</a>";
         echo "</div>\n";
     }
}